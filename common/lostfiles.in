#!/bin/bash

set -eo pipefail

echoerr() {
  # write to stderr
  cat <<< "$@" 1>&2;
}

if [ $UID != "0" ]; then
  echoerr "You must run this script as root."
  exit 1
fi

usage() {
  echo " lostfile @VERSION@"
  echo " Usage: $0 [-s] [-z] [-h]"
  echo "      Calling without an option runs in relaxed mode sorting by name"
  echo "  -h  display this help"
  echo "  -s  optionally define strict mode"
  echo "  -z  optionally sort results by size"
  exit 0
}

# setup defaults which user can override with switches
postprocess="sort"
make_find_filter="make_relaxed_exclude_list"

while getopts 'hsz' OPTION; do
  case "$OPTION" in
    z)
      postprocess="sort_by_size"
      ;;
    s)
      make_find_filter="make_strict_exclude_list"
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND -1))

generate_pkg_files() {
    # echo "Gerando lista de arquivos de pacotes instalados..."
    for pkg in $(xbps-query -l | awk '{print $2}'); do
        xbps-query -f "$pkg"
    done | sed -e 's|^/||' | sort -u > /tmp/pkg_files.txt
}

# generate_pkg_files() {
#   for pkg in $(xbps-query -l | awk '{print $2}'); do
#     xbps-query -f "$pkg"
#   done | sed -e 's|^/||' | sort -u 
# }

find_lost_files() {
    generate_pkg_files
    
    echo "Procurando arquivos perdidos..."
    find /boot /etc /opt /srv /usr /var -type f 2>/dev/null | 
    grep -v -f /tmp/excluded_paths.txt |
    sed -e 's|^/||' | 
    sort -u > /tmp/all_files.txt
    
    comm -13 /tmp/pkg_files.txt /tmp/all_files.txt
    
    # Limpar arquivos tempor√°rios
    rm -f /tmp/pkg_files.txt /tmp/all_files.txt
}


# Sorts a list of file names by size
sort_by_size() {
  tr '\n' '\0' | xargs -0 -n1 du -s | sort -rn -k1
}

# Converts a list of glob-like strings to a single regular expression
# Only the * wildcard is supported. The rest of the characters are compared literally.
miniglob_list_to_regex() {
  arr=("$@")
  str=$(IFS=$'\n' ; echo "${arr[*]}")
  echo -n "$str" | sed 's/[^^*]/[&]/g; s/\^/\\^/g; s/\*/.*/g' | tr '\n' '|'
}

# reads a list of paths from a configuration file at the specified path
# and adds them to the global exclude list variable
read_config() {
  if [ -f "$1" ]; then
    if grep -q '^[^#$ +-]' "$1"; then
      echoerr 'Invalid configuration file.'
      echoerr 'All lines in '"$1"' must start with #, + or -, $.'
      exit 1
    fi

    readarray -t include_list_from_file < <(grep '^+' "$1" | cut -c 2-)
    include_list=("${include_list[@]}" "${include_list_from_file[@]}")

    readarray -t exclude_list_from_file < <(grep '^-' "$1" | cut -c 2-)
    exclude_list=("${exclude_list[@]}" "${exclude_list_from_file[@]}")

    readarray -t custom_filters_list_from_file < <(grep '^\$' "$1" | cut -c 2-)
    custom_filters_list=("${custom_filters_list[@]}" "${custom_filters_list_from_file[@]}")
  fi
}

# Generates a find filter to implement the relaxed excluded paths list.
# relaxed mode is more forgiving about hits, and excludes files generated by various apps.
make_relaxed_exclude_list() {
  # read configuration files
  read_config "$(dirname "$0")/lostfiles.conf"
  read_config "/etc/lostfiles.conf"

  # build include list from configuration files
  find_filter=("${find_filter[@]}" "${include_list[@]}")

  # build a regex to exclude the paths specified in the configuration files
  exclude_list_regex=$(miniglob_list_to_regex "${exclude_list[@]}")

  find_filter=("${find_filter[@]}" -regextype posix-extended)
  find_filter=("${find_filter[@]}" \( -not \( -regex "|$exclude_list_regex|" -prune \) \))

  # evaluate and add the custom filters (i.e. raw parameters to pass to find)
  for i in "${custom_filters_list[@]}"; do
    eval "temp=($i)"
    find_filter=("${find_filter[@]}" "${temp[@]}")
  done
}

# Do not exclude anything in strict mode, just add the default Void paths
make_strict_exclude_list() {
   find_filter=(/boot /efi /etc /opt /srv /usr /var)
}

$make_find_filter

# LC_ALL=C comm -13 \
#   <(LC_ALL=C xbps-query -o | cut -d ' ' -f2 | sed -e 's|/$||' | LC_ALL=C sort -u) \
#   <(LC_ALL=C find "${find_filter[@]}" 2>/dev/null | LC_ALL=C sort -u) | $postprocess

# LC_ALL=C comm -13 \
#   <(LC_ALL=C find /var/db/xbps/ -type f -name "*.plist" -exec xbps-uhelper getfiles {} \; | sed 's|^|\.|' | LC_ALL=C sort -u) \
#   <(LC_ALL=C find "${find_filter[@]}" 2>/dev/null | LC_ALL=C sort -u) | $postprocess

# LC_ALL=C comm -13 \
#   <(LC_ALL=C xbps-query -l | awk '{print $2}' | xargs -I{} xbps-query -f {} | sort -u) \
#   <(LC_ALL=C find "${find_filter[@]}" 2>/dev/null | LC_ALL=C sort -u) | $postprocess

# LC_ALL=C comm -13 \
#   <(LC_ALL=C generate_pkg_files) \
#   <(LC_ALL=C find "${find_filter[@]}" 2>/dev/null | LC_ALL=C sort -u) | $postprocess

# LC_ALL=C comm -13 \
#   <(LC_ALL=C xbps-query -f "*" | sort -u) \
#   <(LC_ALL=C find "${find_filter[@]}" 2>/dev/null | LC_ALL=C sort -u) | $postprocess

find_lost_files

# vim:set ts=2 sw=2 et: