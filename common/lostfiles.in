#!/bin/bash

set -eo pipefail

echoerr() {
  cat <<< "$@" 1>&2
}

if [ $UID != "0" ]; then
  echoerr "You must run this script as root."
  exit 1
fi

usage() {
  echo " lostfile @VERSION@"
  echo " Usage: $0 [-s] [-z] [-h]"
  echo "      Calling without an option runs in relaxed mode sorting by name"
  echo "  -h  display this help"
  echo "  -s  optionally define strict mode"
  echo "  -z  optionally sort results by size"
  exit 0
}

postprocess="sort"
make_find_filter="make_relaxed_exclude_list"

while getopts 'hsz' OPTION; do
  case "$OPTION" in
    z)
      postprocess="sort_by_size"
      ;;
    s)
      make_find_filter="make_strict_exclude_list"
      ;;
    h)
      usage
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND -1))

sort_by_size() {
  tr '\n' '\0' | xargs -0 -n1 du -s | sort -rn -k1
}

miniglob_list_to_regex() {
  arr=("$@")
  str=$(IFS=$'\n' ; echo "${arr[*]}")
  echo -n "$str" | sed 's/[^^*]/[&]/g; s/\^/\\^/g; s/\*/.*/g' | tr '\n' '|'
}

read_config() {
  if [ -f "$1" ]; then
    if grep -q '^[^#$ +-]' "$1"; then
      echoerr 'Invalid configuration file.'
      echoerr 'All lines in '"$1"' must start with #, + or -, $.'
      exit 1
    fi

    readarray -t include_list_from_file < <(grep '^+' "$1" | cut -c 2-)
    include_list=("${include_list[@]}" "${include_list_from_file[@]}")

    readarray -t exclude_list_from_file < <(grep '^-' "$1" | cut -c 2-)
    exclude_list=("${exclude_list[@]}" "${exclude_list_from_file[@]}")

    readarray -t custom_filters_list_from_file < <(grep '^\$' "$1" | cut -c 2-)
    custom_filters_list=("${custom_filters_list[@]}" "${custom_filters_list_from_file[@]}")
  fi
}

make_relaxed_exclude_list() {
  read_config "$(dirname "$0")/lostfiles.conf"
  read_config "/etc/lostfiles.conf"

  find_filter=("${find_filter[@]}" "${include_list[@]}")

  exclude_list_regex=$(miniglob_list_to_regex "${exclude_list[@]}")

  find_filter=("${find_filter[@]}" -regextype posix-extended)
  find_filter=("${find_filter[@]}" \( -not \( -regex "|$exclude_list_regex|" -prune \) \))

  for i in "${custom_filters_list[@]}"; do
    eval "temp=($i)"
    find_filter=("${find_filter[@]}" "${temp[@]}")
  done
}

make_strict_exclude_list() {
  find_filter=(/boot /efi /etc /opt /srv /usr /var)
}

$make_find_filter

# # Adicionar tempo de execução para debug
# echo "Iniciando em $(date)" >&2

# # Criar arquivos temporários
# tmp_pkgs=$(mktemp)
# tmp_sys=$(mktemp)

# echo "Gerando lista de arquivos de pacotes..." >&2
# make_list | sed -e 's|/$||' | LC_ALL=C sort -u > "$tmp_pkgs"
# echo "Lista gerada com $(wc -l < "$tmp_pkgs") arquivos em $(date)" >&2

# echo "Procurando arquivos no sistema..." >&2
# # find "${find_filter[@]}" 2>/dev/null | LC_ALL=C sort -u > "$tmp_sys"
# # find "${find_filter[@]}" -type f 2>/dev/null | sed 's|/$||' | LC_ALL=C sort -u > "$tmp_sys"
# find "${find_filter[@]}" -type f 2>/dev/null | sed 's|/$||' | LC_ALL=C sort -u > "$tmp_sys"
# echo "Encontrados $(wc -l < "$tmp_sys") arquivos no sistema em $(date)" >&2

# echo "Comparando listas..." >&2
# LC_ALL=C comm -13 "$tmp_pkgs" "$tmp_sys" | $postprocess

# # Limpeza
# rm -f "$tmp_pkgs" "$tmp_sys"

# LC_ALL=C comm -13 \
#   <(make_list | LC_ALL=C sort -u) \
#   <(find "${find_filter[@]}" 2>/dev/null | LC_ALL=C sort -u) | $postprocess


# LC_ALL=C comm -13 \
#   <(make_list | LC_ALL=C sort -u) \
#   <(find "${find_filter[@]}" -type f 2>/dev/null | LC_ALL=C sort -u) | $postprocess


# Arquivos temporários
ALL_SYSTEM_FILES=$(mktemp)
ALL_PKG_FILES=$(mktemp)

# 1. Gerar lista completa de todos os arquivos gerenciados por pacotes
find "/var/db/xbps" -name '.*-files.plist' -exec grep -o '<string>.*</string>' {} \; | \
    sed 's/<string>//;s/<\/string>//' | \
    sort -u > "$ALL_PKG_FILES"

# 2. Gerar lista de todos os arquivos do sistema (exceto alguns diretórios especiais)
find /etc /usr /var -path '/var/cache' -prune -o \
    -path '/var/db/xbps' -prune -o \
    -path '/var/log' -prune -o \
    -path '/var/mail' -prune -o \
    -path '/var/spool' -prune -o \
    -path '/var/lib/flatpak' -prune -o \
    -path '/var/tmp' -prune -o \
    -path '/var/run' -prune -o \
    -path '/var/lib/containers' -prune -o \
    -path '/usr/share/mime' -prune -o \
    -path '/tmp' -prune -o \
    -print | sort > "$ALL_SYSTEM_FILES"

# 3. Comparar e mostrar apenas arquivos não gerenciados
echo "Arquivos não gerenciados por nenhum pacote:"
echo "------------------------------------------"
comm -23 "$ALL_SYSTEM_FILES" "$ALL_PKG_FILES"

# Limpeza
rm "$ALL_SYSTEM_FILES" "$ALL_PKG_FILES"
